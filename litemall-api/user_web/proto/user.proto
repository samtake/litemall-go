syntax = "proto3";
option go_package = "./proto";
import "google/protobuf/empty.proto";

service User{
    rpc GetUserList(PageInfo) returns (UserListResponse); // 用户列表
    rpc GetUserByMobile(MobileRequest) returns (UserInfoResponse); //通过mobile查询用户
    rpc GetUserById(IdRequest) returns (UserInfoResponse); //通过id查询用户
    rpc CreateUser(CreateUserInfo) returns (UserInfoResponse); // 添加用户
    rpc UpdateUser(UpdateUserInfo) returns (google.protobuf.Empty); // 更新用户
    rpc CheckPassWord(PasswordCheckInfo) returns (CheckResponse); //检查密码
}

/***
        ************google.protobuf.Empty************
// A generic empty message that you can re-use to avoid defining duplicated
// empty messages in your APIs. A typical example is to use it as the request
// or the response type of an API method. For instance:
//
//     service Foo {
//       rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
//     }
//
// The JSON representation for `Empty` is empty JSON object `{}`.
//直接这么用就可以了： returns (google.protobuf.Empty)
*/

//密码信息
message PasswordCheckInfo {
    string password = 1;
    string encryptedPassword = 2;
}


message CheckResponse{
    bool success = 1;
}


/***************用户列表**************/
//从哪页请求及数量
message PageInfo {
    uint32 pn = 1;//页码
    uint32 pSize = 5;//条数
}

//列表总数
message UserListResponse {
    int32 total = 1;
    repeated UserInfoResponse data = 2;
}


//用户信息（每页返回的信息）
message UserInfoResponse {
    int32 id = 1;
    string passWord = 2;
    string mobile = 3;
    string nickName = 4;
    uint64 birthDay = 5;
    uint32 gender = 6;
    int32 role = 7;//角色
}
/***************用户列表**************/


//通过手机查找用户
message MobileRequest{
    string mobile = 1;
}
//通过id查找用户
message IdRequest {
    int32 id = 1;
}
//创建用户
message CreateUserInfo {
    string nickName = 1;
    string passWord = 2;
    string mobile = 3;
    string telephone = 4;
}
//用户修改信息
message UpdateUserInfo {
    int32 id = 1;
    string nickName = 2;
    int32 gender = 3;
    uint64 birthDay = 4;
}

/*
1、brew install protobuf \ protoc --version
2、生成的客户端和服务器代码。
protoc --go_out=. --go_opt=paths=source_relative \
    --go-grpc_out=. --go-grpc_opt=paths=source_relative  user.proto
3、在handler实现UserServer的以下方法：
            // UserServer is the server API for User service.
        // All implementations must embed UnimplementedUserServer
        // for forward compatibility
        type UserServer interface {
          GetUserList(context.Context, *PageInfo) (*UserListResponse, error)
          GetUserByMobile(context.Context, *MobileRequest) (*UserInfoResponse, error)
          GetUserById(context.Context, *IdRequest) (*UserInfoResponse, error)
          CreateUser(context.Context, *CreateUserInfo) (*UserInfoResponse, error)
          UpdateUser(context.Context, *UpdateUserInfo) (*emptypb.Empty, error)
          CheckPassWord(context.Context, *PasswordCheckInfo) (*CheckResponse, error)
          mustEmbedUnimplementedUserServer()
        }

具体参考：https://grpc.io/docs/languages/go/quickstart/#regenerate-grpc-code
包循环问题：
package command-line-arguments
	imports litemall_servers/user_srv/handler
	imports litemall_servers/user_srv/proto
	imports litemall_servers/user_srv/handler: import cycle not allowed

Compilation finished with exit code 1

想官方demo这样子解决就可以了，不需要分包：
// server is used to implement helloworld.GreeterServer.
type server struct {
	pb.UnimplementedGreeterServer
}
*/